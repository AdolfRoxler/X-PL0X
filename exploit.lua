--GUI = loadstring(game:HttpGet'https://raw.githubusercontent.com/AdolfRoxler/X-PL0X/main/libraries/drawinglib.lua')()
if Drawing then repeat wait() until Drawing end
local WAITBACKGROUND = Drawing.new("Quad")
local WAITMSG = Drawing.new("Text")
local ASSETCOUNT = Drawing.new("Text")
CR1=Drawing.new("Line")
CR2=Drawing.new("Line")

if game:IsLoaded() then else  ---- In case game didn't load leave out a nice ass message like this
	repeat game:GetService("RunService").RenderStepped:Wait() 
		WAITMSG.Center = true 
		WAITMSG.Visible = true
		WAITMSG.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X/2,workspace.CurrentCamera.ViewportSize.Y/3)
		WAITMSG.Size = workspace.CurrentCamera.ViewportSize.Y/workspace.CurrentCamera.ViewportSize.X/10
		WAITMSG.Text = "Yo nigga the game hasn't loaded yet"
		WAITMSG.Color = Color3.new(1,1,1)
		WAITMSG.OutlineColor = Color3.new(0,0,0)
		WAITMSG.Outline = true
		WAITMSG.Font = Drawing.Fonts["Monospace"]
		WAITBACKGROUND.Visible = true
		WAITBACKGROUND.PointA = Vector2.new(workspace.CurrentCamera.ViewportSize.X,0)
		WAITBACKGROUND.PointB = Vector2.new(0,0)
		WAITBACKGROUND.PointC = Vector2.new(0,workspace.CurrentCamera.ViewportSize.Y)
		WAITBACKGROUND.PointD = Vector2.new(workspace.CurrentCamera.ViewportSize.X,workspace.CurrentCamera.ViewportSize.Y)
		WAITBACKGROUND.Color = Color3.new(1,1,1)
		WAITBACKGROUND.Transparency = 1
		WAITBACKGROUND.Filled = true
		ASSETCOUNT.Size = WAITMSG.Size*0.8
		ASSETCOUNT.Position = Vector2.new(WAITMSG.Position.X,WAITMSG.Position.Y+WAITMSG.TextBounds.Y)
		ASSETCOUNT.Text = "Assets to be loaded: "..game:GetService("ContentProvider").RequestQueueSize
		ASSETCOUNT.OutlineColor = Color3.new(0,0,0)
		ASSETCOUNT.Color = Color3.new(1,1,1)
		ASSETCOUNT.Center = true
		ASSETCOUNT.Visible = true
		ASSETCOUNT.Outline = true
		ASSETCOUNT.Font = Drawing.Fonts["Monospace"]
	until game.Loaded
end

function GetBoundingBox(model, orientation) ----- copypasted code xdflol
	if typeof(model) == "Instance" then
		model = model:GetDescendants()
	end
	if not orientation then
		orientation = CFrame.new()
	end
	local abs = math.abs
	local inf = math.huge

	local minx, miny, minz = inf, inf, inf
	local maxx, maxy, maxz = -inf, -inf, -inf

	for _, obj in pairs(model) do
		if obj:IsA("BasePart") then
			local cf = obj.CFrame
			cf = orientation:toObjectSpace(cf)
			local size = obj.Size
			local sx, sy, sz = size.X, size.Y, size.Z

			local x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22 = cf:components()

			local wsx = 0.5 * (abs(R00) * sx + abs(R01) * sy + abs(R02) * sz)
			local wsy = 0.5 * (abs(R10) * sx + abs(R11) * sy + abs(R12) * sz)
			local wsz = 0.5 * (abs(R20) * sx + abs(R21) * sy + abs(R22) * sz)

			if minx > x - wsx then
				minx = x - wsx
			end
			if miny > y - wsy then
				miny = y - wsy
			end
			if minz > z - wsz then
				minz = z - wsz
			end

			if maxx < x + wsx then
				maxx = x + wsx
			end
			if maxy < y + wsy then
				maxy = y + wsy
			end
			if maxz < z + wsz then
				maxz = z + wsz
			end
		end
	end

	local omin, omax = Vector3.new(minx, miny, minz), Vector3.new(maxx, maxy, maxz)
	local omiddle = (omax+omin)/2
	local wCf = orientation - orientation.p + orientation:pointToWorldSpace(omiddle)
	local size = (omax-omin)
	return wCf, size
end

Phys = loadstring(game:HttpGet'https://raw.githubusercontent.com/AdolfRoxler/X-PL0X/main/libraries/physicsMANIPULATOR.lua')()
Gaylib = loadstring(game:HttpGet'https://raw.githubusercontent.com/AdolfRoxler/X-PL0X/main/libraries/Kavo.lua')()
math2 = loadstring(game:HttpGet'https://raw.githubusercontent.com/AdolfRoxler/X-PL0X/main/libraries/arbitrarymath.lua')()
repeat wait() until game:GetService('Players').LocalPlayer
WAITBACKGROUND:Remove()
WAITMSG:Remove()
ASSETCOUNT:Remove()
User = game:GetService('Players').LocalPlayer
Mouse = User:GetMouse()
UserChar,UserHum,hr=false,false,false
SUPERMANN=nil
Rig=nil
inset = 36
SUPERMAN = Instance.new("Animation")
SUPERMAN.AnimationId="http://www.roblox.com/asset/?id=616115533"  ---superman animation???? god muddafuggin dam!!!!
SUPERMANR6 = Instance.new("Animation")
SUPERMANR6.AnimationId = "rbxassetid://429681631"  ---superman animation for r6???? god muddafuggin dam!!!!
ARW = false
HLT = true
function changestatus(h) --- I guess this is how I'll set up humanoid status changes from now on
	if IMMORTALITY and h then h:SetStateEnabled(15,false) end --my dumb ass thought this was somewhere else
	if SWIM and h then h:ChangeState(4) end
	if flight and h then h:ChangeState(5) end
end
function XRAY(int)
local int = tonumber(int) or 0
local function search(obj)
if obj:IsA("BasePart") then obj.LocalTransparencyModifier = math.abs(int) end
if obj:FindFirstChildOfClass("Humanoid") then return end
for _,l in pairs (obj:GetChildren()) do
search(l)
end
end
search(workspace)
end
if UserChar and UserHum and hr then else
	if humanoidstatuschanger then humanoidstatuschanger:Disconnect() end
	spawn(function()
		repeat wait() until User.Character
		UserChar = User.Character
		if UserChar:FindFirstChildOfClass("Humanoid") then UserHum=UserChar:FindFirstChildOfClass("Humanoid") Rig = UserHum.RigType humanoidstatuschanger = UserHum.StateChanged:connect(function() changestatus(UserHum) end) end
		spawn(function() while UserHum==nil do wait() end
			if UserHum and UserHum.RigType == Enum.HumanoidRigType.R15 then
				SUPERMANN = UserHum:LoadAnimation(SUPERMAN) SUPERMANN.Priority = Enum.AnimationPriority.Action SUPERMANN.TimePosition = 1 SUPERMANN.Looped = true
			elseif UserHum then
				SUPERMANN = UserHum:LoadAnimation(SUPERMANR6) SUPERMANN.Priority = Enum.AnimationPriority.Action SUPERMANN.TimePosition = .09 SUPERMANN.Looped = true
			end
			changestatus(UserHum)
		end)
		spawn(function() hr = UserChar:WaitForChild("HumanoidRootPart") end)
	end)
end

User.CharacterAdded:connect(function(nig)
	if humanoidstatuschanger then humanoidstatuschanger:Disconnect() end
	UserChar = nig
	SUPERMANN = nil
	UserHum=UserChar:FindFirstChildOfClass("Humanoid") 
	spawn(function()
		repeat wait() until User.Character:FindFirstChildOfClass("Humanoid")
		UserHum=UserChar:FindFirstChildOfClass("Humanoid") 
		humanoidstatuschanger = UserHum.StateChanged:connect(function() changestatus(UserHum) end)
		Rig = UserHum.RigType
		if User.Character:FindFirstChildOfClass("Humanoid") and User.Character:FindFirstChildOfClass("Humanoid").RigType == Enum.HumanoidRigType.R15 then
			SUPERMANN = User.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(SUPERMAN) SUPERMANN.Priority = Enum.AnimationPriority.Action SUPERMANN.TimePosition = 1 SUPERMANN.Looped = true if flight and superman then SUPERMANN:Play(.1,1,0) end 
		elseif User.Character:FindFirstChildOfClass("Humanoid") then
			SUPERMANN = User.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(SUPERMANR6) SUPERMANN.Priority = Enum.AnimationPriority.Action SUPERMANN.TimePosition = .09 SUPERMANN.Looped = true if flight and superman then SUPERMANN:Play(.1,1,0) end
		end
		changestatus(UserHum)
	end)
	spawn(function()hr = UserChar:WaitForChild("HumanoidRootPart")end)
end) 
--- Thank you xHeptc for making the super duper sexy nigger gui lib
game:GetService("RunService").RenderStepped:connect(function() -- Constant updater to ease up resource use
	Camera = workspace.CurrentCamera
	Resolution = Vector2.new(Mouse.ViewSizeX,Mouse.ViewSizeY)
	if SUPERMANN then
		if Rig == Enum.HumanoidRigType.R15 then
			SUPERMANN.Priority = Enum.AnimationPriority.Action
			SUPERMANN.TimePosition = 1
			SUPERMANN.Looped = true
		else
			SUPERMANN.Priority = Enum.AnimationPriority.Action 
			SUPERMANN.TimePosition = .12 
			SUPERMANN.Looped = true
		end
		if CROSS then
			CR1.Visible = true
			CR2.Visible = true
			local maths = (Resolution.Y*(math.abs(CROSSS)/1000))
			CR1.From = Vector2.new(Mouse.X-maths,Mouse.Y+inset)
			CR1.To = Vector2.new(Mouse.X+maths,Mouse.Y+inset)
			CR1.Thickness = (Resolution.Y*.0025)
			CR2.From = Vector2.new(Mouse.X,Mouse.Y+inset+maths)
			CR2.To = Vector2.new(Mouse.X,Mouse.Y+inset-maths)
			CR2.Thickness = (Resolution.Y*.0025)
			CR1.Color = CROSSC
			CR2.Color = CROSSC
			CR1.ZIndex = lowvalue
			CR2.ZIndex = lowvalue
            if CROSSTRAN then
            CR1.Transparency = CROSSTRAN/100 else CR1.Transparency = 1 end
            CR2.Transparency = CR1.Transparency
		else
			CR1.Visible = false
			CR2.Visible = false
		end
	end
    if XRAYB and XRAYBU then
    XRAY(XRAYM)  end
end)
--- A little bit of insight, this script is the rebirth of Skidmund, a script I never released, aspiring the same objective, but in a much more efficient way.
---
--[[ Reference
local Tab= Library.CreateLib("TITLE", "DarkTheme")

local Section = Tab:NewSection("Section Name")

Section:UpdateSection("Section New Title")

Section:NewLabel("LabelText")

label:UpdateLabel("New Text")

Section:NewButton("ButtonText", "ButtonInfo", function()
    print("Clicked")
end)

button:UpdateButton("New Text")

Section:NewToggle("ToggleText", "ToggleInfo", function(state)
    if state then
        print("Toggle On")
    else
        print("Toggle Off")
    end
end)

Section:NewSlider("SliderText", "SliderInfo", 500, 0, function(s) -- 500 (MaxValue) | 0 (MinValue)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = s
end)

Section:NewTextBox("TextboxText", "TextboxInfo", function(txt)
	print(txt)
end)

Section:NewKeybind("KeybindText", "KeybindInfo", Enum.KeyCode.F, function()
	print("You just clicked the bind")
end)


Library:ToggleUI()

Section:NewDropdown("DropdownText", "DropdownInf", {"Option 1", "Option 2", "Option 3"}, function(currentOption)
    print(currentOption)
end)

]]
---

---

Mouse.Button1Down:connect(function()
if CLICKTP and Mouse then
if UserChar then
local n,s = GetBoundingBox(UserChar)
UserChar:TranslateBy(Mouse.Hit.p-n.p+Vector3.new(0,s.Y/2,0))
if hr and Mouse.Target and Mouse.Target:IsA("BasePart") then hr.AssemblyLinearVelocity = Mouse.Target.AssemblyLinearVelocity end
end
end

if CLICKDEL and Mouse then
if Mouse.Target and Mouse.Target:FindFirstAncestorWhichIsA("Model") and Mouse.Target:FindFirstAncestorWhichIsA("Model"):FindFirstChildOfClass("Humanoid") or Mouse.Target:FindFirstAncestorWhichIsA("Camera") then else
Mouse.Target.Size = Vector3.new(0,0,0)
end
end
end)

--- Global Variables
ESP = false
flight = false
fspeed = 10
spdsp=16
spd=false
superman=false
CROSS=false
CROSSC=Color3.new(1,1,1)
CROSSS=15
IMMORTALITY=false
SWIM=false
XRAYB=false
HESPT = false
NTAGST = false
NTAGSV = 0
NTAGV = 15
---
local GUI = Gaylib.CreateLib("X-PL0X", "DarkTheme")
local Visuals = GUI:NewTab("Visuals")
local ESPS = Visuals:NewSection("Render")
ESPS:NewToggle("ESP", "Toggles ESP duh", function(state)
		ESP = state
end)
ESPS:NewToggle("Crosshair", "'Nice crosshair, where'd you get it?'", function(state)
	CROSS = state
end)
ESPS:NewToggle("X-Ray", "'This nigga's superman or something..'", function(state)
XRAYB = state
if not XRAYB then XRAY(0) else XRAY(XRAYM) end
end)
local Util = GUI:NewTab("Utilities")
local SPDS = Util:NewSection("Movement")
local SPDT = SPDS:NewToggle("Walkspeed","run fast as fuck boiiiii",function(state)spd=state end)
local FLYT = SPDS:NewToggle("Flight", "you fly duh", function(state)
	if state then 
		movedir=Vector3.new(0,0,0)
		flight=true
		spawn(function() ---- This is the only fucking way I can do it
			repeat wait() until UserHum
			local FallingDown = UserHum:GetStateEnabled(Enum.HumanoidStateType.FallingDown)
			local Running = UserHum:GetStateEnabled(Enum.HumanoidStateType.Running)
			local RunningNoPhysics = UserHum:GetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics)
			local Climbing = UserHum:GetStateEnabled(Enum.HumanoidStateType.Climbing)
			local StrafingNoPhysics = UserHum:GetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics)
			local Ragdoll = UserHum:GetStateEnabled(Enum.HumanoidStateType.Ragdoll)
			local GettingUp = UserHum:GetStateEnabled(Enum.HumanoidStateType.GettingUp)
			local Jumping = UserHum:GetStateEnabled(Enum.HumanoidStateType.Jumping)
			local Landed = UserHum:GetStateEnabled(Enum.HumanoidStateType.Landed)
			local Flying = UserHum:GetStateEnabled(Enum.HumanoidStateType.Flying)
			local Freefall = UserHum:GetStateEnabled(Enum.HumanoidStateType.Freefall)
			local Seated = UserHum:GetStateEnabled(Enum.HumanoidStateType.Seated)
			local PlatformStanding = UserHum:GetStateEnabled(Enum.HumanoidStateType.PlatformStanding)
			local Swimming = UserHum:GetStateEnabled(Enum.HumanoidStateType.Swimming)
			local Physics = UserHum:GetStateEnabled(Enum.HumanoidStateType.Physics)
			local None = UserHum:GetStateEnabled(Enum.HumanoidStateType.None)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.FallingDown,false)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Running,false)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,false)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Climbing,false)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,false)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,false)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.GettingUp,false)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Jumping,false)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Landed,false)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Flying,false)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Freefall,true)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Seated,false)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,false)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Swimming,false)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Physics,false)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.None,false)
			spawn(function() repeat wait() until flight==false
				UserHum:SetStateEnabled(Enum.HumanoidStateType.FallingDown,FallingDown)
				UserHum:SetStateEnabled(Enum.HumanoidStateType.Running,Running)
				UserHum:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,RunningNoPhysics)
				UserHum:SetStateEnabled(Enum.HumanoidStateType.Climbing,Climbing)
				UserHum:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,StrafingNoPhysics)
				UserHum:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,Ragdoll)
				UserHum:SetStateEnabled(Enum.HumanoidStateType.GettingUp,GettingUp)
				UserHum:SetStateEnabled(Enum.HumanoidStateType.Jumping,Jumping)
				UserHum:SetStateEnabled(Enum.HumanoidStateType.Landed,Landed)
				UserHum:SetStateEnabled(Enum.HumanoidStateType.Flying,Flying)
				UserHum:SetStateEnabled(Enum.HumanoidStateType.Freefall,Freefall)
				UserHum:SetStateEnabled(Enum.HumanoidStateType.Seated,Seated)
				UserHum:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,PlatformStanding)
				UserHum:SetStateEnabled(Enum.HumanoidStateType.Swimming,Swimming)
				UserHum:SetStateEnabled(Enum.HumanoidStateType.Physics,Physics)
				UserHum:SetStateEnabled(Enum.HumanoidStateType.None,None)
			end) end)
		if SUPERMANN and superman then SUPERMANN:Play(.1,1,0) end
	else flight=false movedir=Vector3.new(0,0,0) if SUPERMANN then SUPERMANN:Stop() end
	end
	changestatus(UserHum)
end)
local CLICKTPT = SPDS:NewToggle("Click teleport", "Check the settings for it before using", function(state)
CLICKTPTOG=state
end)
local CLICKTPT = SPDS:NewToggle("Click 'delete'", "Check the settings for it before using", function(state)
CLICKDELTOG=state
end)
local Spoofing = GUI:NewTab("Spoofing")
---
local SPFN = Spoofing:NewSection("Network")
local BRAZILWIFI = SPFN:NewTextBox("Outbound KB/s", "Default is 64KB/s", function(am)
	OKBPS = tonumber(math.abs(am)) or 64
    game:GetService("NetworkClient"):SetOutgoingKBPSLimit(OKBPS)
end)
local BRAZILPING = SPFN:NewTextBox("Replication lag", "It's a multiplier. Any number.", function(am)
	RLAG = tonumber(math.abs(am)) or 0
    settings().Network.IncomingReplicationLag = RLAG
end)
---
local Misc = GUI:NewTab("Miscellaneous")
local MiscVis = Misc:NewSection("Visuals (some might not work because roblox)")
MiscVis:NewToggle("'Wireframe'", "It's supposed to work....", function(state)
    settings().Rendering.RenderCSGTrianglesDebug = state
end)
MiscVis:NewToggle("Bounding Boxes", "Draws box around EVERYTHING", function(state)
    settings().Rendering.ShowBoundingBoxes = state
end)
MiscVis:NewToggle("VRAM unlocker", "Disables vram cap", function(state)
    settings().Rendering.EagerBulkExecution = state
end)
MiscVis:NewTextBox("Change mesh cache", "Default size is 32MB", function(state)
    settings().Rendering.MeshCacheSize = tonumber(state) or 32
end)
MiscVis:NewToggle("Diagnostic mode", "Toggles diagnostic mode", function(state)
    if state then settings().Rendering.GraphicsMode = Enum.GraphicsMode.NoGraphics
    else
    settings().Rendering.GraphicsMode = Enum.GraphicsMode.Automatic end
end)
local Prot = GUI:NewTab("Protection")
local MSECT = Prot:NewSection("Character")
local MTOG = MSECT:NewToggle("Disable death","Death? Is this a bad joke?",function(state)
	IMMORTALITY=state
	spawn(function()
		repeat wait() until UserHum
		local hst = UserHum:GetStateEnabled(15)
		if state then spawn(function() repeat wait() until IMMORTALITY==false UserHum:SetStateEnabled(15,hst) end) end
	end)
	changestatus(UserHum)
end)
local FPDST = MSECT:NewToggle("Ignore destruction layer","Fall for 99999 seconds challenge",function(state)
	FPDSD = state
	spawn(function()
		local hst = workspace.FallenPartsDestroyHeight
		workspace.FallenPartsDestroyHeight = math.huge-math.huge
		if FPDSD then spawn(function() repeat wait() until FPDSD==false workspace.FallenPartsDestroyHeight=hst end) end
	end)
end)
local Gim = GUI:NewTab("Gimmicks")
local CharGim = Gim:NewSection("Character")
local TrollGim = Gim:NewSection("Trolling")
local PlaySounds = TrollGim:NewButton("Fuck... I hate niggers....", "Plays every sound [FE]", function()
for _,S in pairs(game:GetDescendants()) do if S:IsA("Sound") then S:Play() end end
end)
local StopSounds = TrollGim:NewButton("NIGGERS ARE BLACK BRO!!!! SCARY.", "Stops every sound [FE]", function()
for _,S in pairs(game:GetDescendants()) do if S:IsA("Sound") then S:Stop() end end
end)
function updsoundtroll() --- too lazy to copypaste the same function twice lol
if game:GetService("SoundService").RespectFilteringEnabled==true then
PlaySounds:UpdateButton("Play sounds [Local]")
StopSounds:UpdateButton("Stop sounds [Local]")
else
PlaySounds:UpdateButton("Play sounds [Global]")
StopSounds:UpdateButton("Stop sounds [Global]")
end end updsoundtroll()
game:GetService("SoundService").Changed:Connect(function(s) if s=="RespectFilteringEnabled" then updsoundtroll() end end) --- in case something changes FE sounds mid-game.
local swmT = CharGim:NewToggle("Air swim","Do crabs think fish fly?",function(state)
	SWIM = state
	spawn(function() ---- This is the only fucking way I can do it
		repeat wait() until UserHum
		local FallingDown = UserHum:GetStateEnabled(Enum.HumanoidStateType.FallingDown)
		local Running = UserHum:GetStateEnabled(Enum.HumanoidStateType.Running)
		local RunningNoPhysics = UserHum:GetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics)
		local Climbing = UserHum:GetStateEnabled(Enum.HumanoidStateType.Climbing)
		local StrafingNoPhysics = UserHum:GetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics)
		local Ragdoll = UserHum:GetStateEnabled(Enum.HumanoidStateType.Ragdoll)
		local GettingUp = UserHum:GetStateEnabled(Enum.HumanoidStateType.GettingUp)
		local Jumping = UserHum:GetStateEnabled(Enum.HumanoidStateType.Jumping)
		local Landed = UserHum:GetStateEnabled(Enum.HumanoidStateType.Landed)
		local Flying = UserHum:GetStateEnabled(Enum.HumanoidStateType.Flying)
		local Freefall = UserHum:GetStateEnabled(Enum.HumanoidStateType.Freefall)
		local Seated = UserHum:GetStateEnabled(Enum.HumanoidStateType.Seated)
		local PlatformStanding = UserHum:GetStateEnabled(Enum.HumanoidStateType.PlatformStanding)
		local Swimming = UserHum:GetStateEnabled(Enum.HumanoidStateType.Swimming)
		local Physics = UserHum:GetStateEnabled(Enum.HumanoidStateType.Physics)
		local None = UserHum:GetStateEnabled(Enum.HumanoidStateType.None)
		UserHum:SetStateEnabled(Enum.HumanoidStateType.FallingDown,false)
		UserHum:SetStateEnabled(Enum.HumanoidStateType.Running,false)
		UserHum:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,false)
		UserHum:SetStateEnabled(Enum.HumanoidStateType.Climbing,false)
		UserHum:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,false)
		UserHum:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,false)
		UserHum:SetStateEnabled(Enum.HumanoidStateType.GettingUp,false)
		UserHum:SetStateEnabled(Enum.HumanoidStateType.Jumping,false)
		UserHum:SetStateEnabled(Enum.HumanoidStateType.Landed,false)
		UserHum:SetStateEnabled(Enum.HumanoidStateType.Flying,false)
		UserHum:SetStateEnabled(Enum.HumanoidStateType.Freefall,true)
		UserHum:SetStateEnabled(Enum.HumanoidStateType.Seated,false)
		UserHum:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,false)
		UserHum:SetStateEnabled(Enum.HumanoidStateType.Swimming,false)
		UserHum:SetStateEnabled(Enum.HumanoidStateType.Physics,false)
		UserHum:SetStateEnabled(Enum.HumanoidStateType.None,false)
		spawn(function() repeat wait() until SWIM==false
			UserHum:SetStateEnabled(Enum.HumanoidStateType.FallingDown,FallingDown)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Running,Running)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,RunningNoPhysics)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Climbing,Climbing)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,StrafingNoPhysics)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,Ragdoll)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.GettingUp,GettingUp)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Jumping,Jumping)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Landed,Landed)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Flying,Flying)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Freefall,Freefall)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Seated,Seated)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,PlatformStanding)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Swimming,Swimming)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.Physics,Physics)
			UserHum:SetStateEnabled(Enum.HumanoidStateType.None,None)
		end) 
	end)
	changestatus(UserHum)
end)


--[[
Will be added later
local Spoofing = GUI:NewTab("Spoofing")
local Misc = GUI:NewTab("Miscellaneous")
local Prot = GUI:NewTab("Protection") 
local Util = GUI:NewTab("Utilities")
local Gim = GUI:NewTab("Gimmicks")
]]
---
local Statsz = GUI:NewTab("Stats")
local ClientStats = Statsz:NewSection("Client")
local ServerStats = Statsz:NewSection("Server")

local FPSL = ClientStats:NewLabel("FPS")
local PINGL = ClientStats:NewLabel("Ping")
local PhysL = ClientStats:NewLabel("Physics TPS")
local PhysLR = ClientStats:NewLabel("REAL")

local TPSL = ServerStats:NewLabel("TPS")
local PTPSL = ServerStats:NewLabel("Physics TPS")
---
local Settings = GUI:NewTab("Settings")
local ESPSET = Settings:NewSection("ESP")
local CROSSSET = Settings:NewSection("Crosshair")
local XRAYSET = Settings:NewSection("X-Ray")
local mn = ESPSET:NewToggle("Directional Arrows", "y u no like dem??", function(state) 
	ARW=state
end)
local mn2 = ESPSET:NewToggle("Healthbar", "buh 💀", function(state) 
	HLT=state
end)
local HESP = ESPSET:NewToggle("Show heads", "gg ez onetap", function(state) 
HESPT = state
end)
local TRACERS = ESPSET:NewToggle("Tracers", "omg guys i found him!!", function(state) 
TRACERST = state
end)
local NTAG = ESPSET:NewToggle("Nametags", "u n00b ncca?", function(state) 
NTAGST = state
end)
local NTAGS = ESPSET:NewSlider("Nametag offset", "(Y%)", 400, -400, function(s)
NTAGSV = s
end)
local NTAGS = ESPSET:NewTextBox("Nametag size", "Any non-imaginary number", function(s)
NTAGV = s
end)
mn2:UpdateToggle("Healthbar",true)

local CROSSCS = CROSSSET:NewColorPicker("Crosshair color", "Choose whatever color", Color3.fromRGB(255,255,255), function(color)
	CROSSC = color
end)
local CROSSTRANSEL = CROSSSET:NewSlider("Crosshair (%)", "How opaque?", 100, 0, function(s)
	CROSSTRAN = s
end)
local CROSSSZ = CROSSSET:NewTextBox("Crosshair size","Any non-imaginary number", function(am)
	CROSSS = tonumber(am) or 15
end)
local XRAYSETT = XRAYSET:NewSlider("X-Ray (%)", "100% = map is invisible", 100, 0, function(s)
XRAYM = s/100
end)
local AUTOUPDXRAY = XRAYSET:NewToggle("X-Ray autoupdate", "VERY resource intensive", function(state) 
XRAYBU=state
end)
AUTOUPDXRAY:UpdateToggle("X-Ray autoupdate",true)
local UPDXRAY = XRAYSET:NewButton("X-Ray manual update", "Manually update X-RAY", function() 
if XRAYB then
XRAY(XRAYM)
end
end)

local SPDSET = Settings:NewSection("Movement")
local FLYSP = SPDSET:NewTextBox("Flight speed","Any non-imaginary number", function(am)
	fspeed = tonumber(am) or 10
end)
local SUPRMN = SPDSET:NewToggle("Superman mockup", "wtf are you superman ncca?", function(state) superman=state 
	if state and SUPERMANN then
		spawn(function()
			repeat wait() until flight==true
			if superman==false then else
				if SUPERMANN then
					SUPERMANN.Priority = Enum.AnimationPriority.Action
					SUPERMANN.TimePosition = 1 warn("supernig!")
					SUPERMANN.Looped = true
					SUPERMANN:Play(.1,1,0) end
			end
		end)
	elseif not state or flight==false then
		if SUPERMANN then
			SUPERMANN:Stop() 
		end
	end
end)
local SPDP = SPDSET:NewTextBox("Walkspeed","Any non-imaginary number", function(am)
	spdsp = tonumber(am) or 16
end)
local BINDSET = Settings:NewSection("Keybinds")
local CLICKTPKB = BINDSET:NewKeybind("Click teleport bind", "This is the keybind for it", Enum.KeyCode.LeftControl, function(bind)
warn(bind)
if CLICKTPTOG then
if CLICKTP then
CLICKTP = false
else CLICKTP = true spawn(function() while game:GetService("UserInputService"):IsKeyDown(bind) do game:GetService("UserInputService").InputEnded:Wait() end CLICKTP = false end)
end
end
end)
local CLICKDELKB = BINDSET:NewKeybind("Click delete bind", "This is the keybind for it", Enum.KeyCode.RightAlt, function(bind)
if CLICKDELTOG then
if CLICKDEL then
CLICKDEL = false
else CLICKDEL = true spawn(function() while game:GetService("UserInputService"):IsKeyDown(bind) do game:GetService("UserInputService").InputEnded:Wait() end CLICKDEL = false end)
end
end
end)
---
local Credits = GUI:NewTab("Credits")
local Thx = Credits:NewSection("Thanks to:")
local Thxwho = Thx:NewLabel("Github - home of this shit")
local Thxwho2 = Thx:NewLabel("xHeptc - fuck you nigga why can't I fuck this UI???")
local Thxwho3 = Thx:NewLabel("rqccc - taught me how to get server ping")
local DC = GUI:NewTab("Discord")
local mm=DC:NewSection("Discord Server")
local m=mm:NewButton("Copy to clipboard", "copies discord invite to clipboard", function()
if discorddebounce then else
	setclipboard('https://discord.gg/eCtE2ukNVV')
	m:UpdateButton("Copied!")
    discorddebounce=true
	wait(1)
    discorddebounce=nil
	m:UpdateButton("Copy to clipboard")
end
end)
---
--[[  So yeah this is ESP template and stuff

[Player] = 
{
    Plr,
    Box,
    Healthbar = {},
    Arrow = {},
}

]]
--- Custom Functions and shit
PLAYERLIST = {}
lowvalue = 2^31-1
highvalue = -lowvalue
--StatsService = game:GetService("Stats") --- redundant af
StatsService = stats()
UserInputService = game:GetService("UserInputService")
DELTA = 0
Ping = StatsService:WaitForChild("Network"):WaitForChild("ServerStatsItem"):WaitForChild("Data Ping")
ContextActionService = game:GetService("ContextActionService")
movedir=Vector3.new(0,0,0)
f,b,l,r = false,false,false,false
function refreshplayers()
	game:GetService("RunService").RenderStepped:Wait()
	for _,L in pairs(PLAYERLIST) do L.Tracer:Remove() L.Head:Remove() L.Nametag:Remove() L.Healthbar[1]:Remove() L.Healthbar[2]:Remove() L.Box:Remove() L.Arrow[1]:Remove() L.Arrow[2]:Remove() L.Arrow[3]:Remove() L.Arrow[4]:Remove() L.Arrow[5]:Remove() L.Arrow[6]:Remove() L.Arrow[7]:Remove() L.Arrow[8]:Remove() L.Arrow[9]:Remove() L.Arrow[10]:Remove() PLAYERLIST[_]=nil end
	local PlayerList = game:GetService("Players"):GetPlayers()
	for _,L in pairs(PlayerList) do 
		if L and L~=User then
			PLAYERLIST[L]={L,Tracer=Drawing.new("Line"),Head=Drawing.new("Circle"),Nametag=Drawing.new("Text"),Box=Drawing.new("Quad"),Healthbar={Drawing.new("Quad"),Drawing.new("Quad")},Arrow={Drawing.new("Quad"),Drawing.new("Triangle"),Drawing.new("Quad"),Drawing.new("Triangle"),Drawing.new("Quad"),Drawing.new("Quad"),Drawing.new("Quad"),Drawing.new("Quad"),Drawing.new("Quad"),Drawing.new("Quad")}} 
		end
	end
end
refreshplayers() 
game:GetService("Players").PlayerAdded:connect(function() refreshplayers()  end)
game:GetService("Players").PlayerRemoving:connect(function() refreshplayers()  end)
local function MOVEMENT(actionname, inputstate, inputobject) --- I FUCKING HATE CONTEXTACTIONSERVICE!!!!!!!!!!!!!!!!!!!!!!!!!
	if flight then
		if f==false and actionname == "f" and inputstate == Enum.UserInputState.Begin then f=true movedir = Vector3.new(movedir.X,movedir.Y,movedir.Z-1) end
		if b==false and actionname == "b" and inputstate == Enum.UserInputState.Begin then b=true movedir = Vector3.new(movedir.X,movedir.Y,movedir.Z+1) end
		if l==false and actionname == "l" and inputstate == Enum.UserInputState.Begin then l=true movedir = Vector3.new(movedir.X-1,movedir.Y,movedir.Z) end
		if r==false and actionname == "r" and inputstate == Enum.UserInputState.Begin then r=true movedir = Vector3.new(movedir.X+1,movedir.Y,movedir.Z) end

		if f==true and actionname == "f" and inputstate == Enum.UserInputState.End then f=false movedir = Vector3.new(movedir.X,movedir.Y,movedir.Z+1) end
		if b==true and actionname == "b" and inputstate == Enum.UserInputState.End then b=false movedir = Vector3.new(movedir.X,movedir.Y,movedir.Z-1) end
		if l==true and actionname == "l" and inputstate == Enum.UserInputState.End then l=false movedir = Vector3.new(movedir.X+1,movedir.Y,movedir.Z) end
		if r==true and actionname == "r" and inputstate == Enum.UserInputState.End then r=false movedir = Vector3.new(movedir.X-1,movedir.Y,movedir.Z) end
	end end
ContextActionService:BindAction("f", MOVEMENT, false, Enum.PlayerActions.CharacterForward)
ContextActionService:BindAction("b", MOVEMENT, false, Enum.PlayerActions.CharacterBackward)
ContextActionService:BindAction("l", MOVEMENT, false, Enum.PlayerActions.CharacterLeft)
ContextActionService:BindAction("r", MOVEMENT, false, Enum.PlayerActions.CharacterRight)
UserInputService.InputChanged:Connect(function(input, gameProcessed) if gameProcessed then movedir = Vector3.new(0,0,0) f,b,l,r = false,false,false,false  end end)---UI BUGFIX
--- Whatever else section
game:GetService("RunService").Stepped:connect(function(a,d) ---inefficient but I think it'd be more if I spread it accross renderS and S, plus ws won't work if .RS is used
	physTPS=d or 0
	if hr and flight then
		local movedir2 = movedir
		if movedir.Magnitude>0 then
			movedir2 = movedir.Unit 
		end
		local cf = (workspace.CurrentCamera.CFrame.Rotation+hr.CFrame.p):ToWorldSpace(CFrame.new(movedir2*fspeed))
		Phys:MoveTo(hr,cf,5)
		if superman and movedir2.Magnitude>0 then --hr.CFrame = hr.CFrame:lerp(CFrame.new(hr.CFrame.p,cf.p),d*50) ---eh not for my taste, choppy it is!
			hr.CFrame = CFrame.new(hr.CFrame.p,cf.p)
		end
	elseif hr and flight==false then Phys:PurgePhysics(hr) else FLYT:UpdateToggle("Fly",false)
	end
	if hr and spd==true and flight==false and UserHum and UserHum.MoveDirection.Magnitude>0 then
		local ws = UserHum.MoveDirection.Unit*spdsp
		hr.AssemblyLinearVelocity=Vector3.new(ws.X,hr.AssemblyLinearVelocity.Y,ws.Z)
		--elseif hr==nil or UserHum==nil then SPDT:UpdateToggle("Enable",false) ---not really needed
	end
	if SWIM and flight==false and hr and UserHum then --
		hr:ApplyImpulse(Vector3.new(0,hr.AssemblyMass*workspace.Gravity*d,0)) --- as precise as I can go, lots of trial and error, then it suddendly came up to me when I accidentally pressed F12.
	end 
end)
--- Rendering section
game:GetService("RunService").RenderStepped:connect(function(D)
	DELTA = D
	for _,N in pairs(PLAYERLIST) do
		local Plr = _
		local Box = N.Box
		local Arrow = N.Arrow
		local Healthbar = N.Healthbar
		local Char = Plr.Character
        local HeadE = N.Head
        local NameTag = N.Nametag
        local Tracer = N.Tracer
		if Char and Box and Arrow[10] and Healthbar[2] and NameTag and HeadE and (Char:GetModelCFrame().p-Camera.CFrame.p).Magnitude<25000 then --- hard limit lol
            local Head = Char:FindFirstChild("Head")
			local Hum = Char:FindFirstChildOfClass("Humanoid")
			local Pos,Size = Char:GetModelCFrame(),Char:GetExtentsSize()

			local UR,V1 = Camera:WorldToViewportPoint(Pos*(Vector3.new(Size.X,Size.Y,0)/2))
			local UL,V2 = Camera:WorldToViewportPoint(Pos*(Vector3.new(-Size.X,Size.Y,0)/2))
			local DL,V3 = Camera:WorldToViewportPoint(Pos*(Vector3.new(-Size.X,-Size.Y,0)/2))
			local DR,V4 = Camera:WorldToViewportPoint(Pos*(Vector3.new(Size.X,-Size.Y,0)/2))

			Box.PointA = Vector2.new(UR.X,UR.Y)
			Box.PointB = Vector2.new(UL.X,UL.Y)
			Box.PointC = Vector2.new(DL.X,DL.Y)
			Box.PointD = Vector2.new(DR.X,DR.Y)

			--- these above are for the directional arrow



			local BUR,V19 = Camera:WorldToViewportPoint(Pos*(Vector3.new(-Size.X/1.65,Size.Y/2,0)))
			local BUL,V20 = Camera:WorldToViewportPoint(Pos*(Vector3.new(-Size.X/2,Size.Y/2,0)))
			local BDL,V21 = Camera:WorldToViewportPoint(Pos*(Vector3.new(-Size.X/2,-Size.Y/2,0)))
			local BDR,V22 = Camera:WorldToViewportPoint(Pos*(Vector3.new(-Size.X/1.65,-Size.Y/2,0)))

			local H1,H2 = 0,0

			if Hum then
				local healthperone = (Hum.Health/Hum.MaxHealth)
				--if Hum.Health==0 or Hum:GetState() == Enum.HumanoidStateType.Dead then healthperone=0 end
				local barh = -Size.Y/2+(Size.Y)*healthperone
				H1 = Camera:WorldToViewportPoint(Pos*(Vector3.new(-Size.X/1.65,barh,0)))
				H2 = Camera:WorldToViewportPoint(Pos*(Vector3.new(-Size.X/2,barh,0)))
				Healthbar[2].Color = Color3.fromHSV(healthperone*.3,0.8,1)
			else
				H1 = BDL
				H2 = BDR
			end

			Healthbar[1].PointA = Vector2.new(BUR.X,BUR.Y)
			Healthbar[1].PointB = Vector2.new(BUL.X,BUL.Y)
			Healthbar[1].PointC = Vector2.new(BDL.X,BDL.Y)
			Healthbar[1].PointD = Vector2.new(BDR.X,BDR.Y)

			Healthbar[2].PointA = Vector2.new(H1.X,H1.Y)
			Healthbar[2].PointB = Vector2.new(H2.X,H2.Y)
			Healthbar[2].PointC = Vector2.new(BDL.X,BDL.Y)
			Healthbar[2].PointD = Vector2.new(BDR.X,BDR.Y)

			--- healthbar logic above


			Box.Filled = false

			Box.Thickness = (0.068*Resolution.Y)/(Camera.CFrame.p-(Pos.p+Vector3.new(0,Size.Y,0))).Magnitude
			Box.Color = Color3.new(1,1,1)
			Box.ZIndex = lowvalue+1



			Healthbar[1].Filled = true
			Healthbar[1].ZIndex = Box.ZIndex+1
			Healthbar[1].Color = Color3.new(0,0,0)
			Healthbar[1].Thickness = 0--Box.Thickness

			Healthbar[2].Filled = true
			Healthbar[2].ZIndex = Healthbar[1].ZIndex+1
			Healthbar[2].Thickness = 0
            ------------
            local UR,UL,DL,DR,L,R,U,UR2,UL2,DL2,DR2,L2,U2,R2,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16,V17,V18 = nil
            if ARW then


            UR,V5 = Camera:WorldToViewportPoint(Pos*(Vector3.new(Size.X/8,Size.Y,0)))
			UL,V6 = Camera:WorldToViewportPoint(Pos*(Vector3.new(-Size.X/8,Size.Y,0)))
			DL,V7 = Camera:WorldToViewportPoint(Pos*(Vector3.new(-Size.X/8,Size.Y,Size.X/2)))
			DR,V8 = Camera:WorldToViewportPoint(Pos*(Vector3.new(Size.X/8,Size.Y,Size.X/2)))

			Arrow[1].PointA = Vector2.new(UR.X,UR.Y)
			Arrow[1].PointB = Vector2.new(UL.X,UL.Y)
			Arrow[1].PointC = Vector2.new(DL.X,DL.Y)
			Arrow[1].PointD = Vector2.new(DR.X,DR.Y)

			L,V9 = Camera:WorldToViewportPoint(Pos*(Vector3.new(-Size.X/4,Size.Y,0)))
			R,V10 = Camera:WorldToViewportPoint(Pos*(Vector3.new(Size.X/4,Size.Y,0)))
			U,V11 = Camera:WorldToViewportPoint(Pos*(Vector3.new(0,Size.Y,-Size.X/2)))

			Arrow[2].PointA = Vector2.new(U.X,U.Y)
			Arrow[2].PointB = Vector2.new(L.X,L.Y)
			Arrow[2].PointC = Vector2.new(R.X,R.Y)

			UR2,V12 = Camera:WorldToViewportPoint(Pos*(Vector3.new(Size.X/8,Size.Y+Size.X/5,0)))
			UL2,V13 = Camera:WorldToViewportPoint(Pos*(Vector3.new(-Size.X/8,Size.Y+Size.X/5,0)))
			DL2,V14 = Camera:WorldToViewportPoint(Pos*(Vector3.new(-Size.X/8,Size.Y+Size.X/5,Size.X/2)))
			DR2,V15 = Camera:WorldToViewportPoint(Pos*(Vector3.new(Size.X/8,Size.Y+Size.X/5,Size.X/2)))

			Arrow[3].PointA = Vector2.new(UR2.X,UR2.Y)
			Arrow[3].PointB = Vector2.new(UL2.X,UL2.Y)
			Arrow[3].PointC = Vector2.new(DL2.X,DL2.Y)
			Arrow[3].PointD = Vector2.new(DR2.X,DR2.Y)

			L2,V16 = Camera:WorldToViewportPoint(Pos*(Vector3.new(-Size.X/4,Size.Y+Size.X/5,0)))
			R2,V17 = Camera:WorldToViewportPoint(Pos*(Vector3.new(Size.X/4,Size.Y+Size.X/5,0)))
			U2,V18 = Camera:WorldToViewportPoint(Pos*(Vector3.new(0,Size.Y+Size.X/5,-Size.X/2)))

			Arrow[4].PointA = Vector2.new(U2.X,U2.Y)
			Arrow[4].PointB = Vector2.new(L2.X,L2.Y)
			Arrow[4].PointC = Vector2.new(R2.X,R2.Y)


            Arrow[1].Filled = true
			Arrow[2].Filled = Arrow[1].Filled
			Arrow[3].Filled = Arrow[1].Filled
			Arrow[4].Filled = Arrow[1].Filled
			Arrow[5].Filled = Arrow[1].Filled
			Arrow[6].Filled = Arrow[1].Filled
			Arrow[7].Filled = Arrow[1].Filled
			Arrow[8].Filled = Arrow[1].Filled
			Arrow[9].Filled = Arrow[1].Filled
			Arrow[10].Filled = Arrow[1].Filled

			Arrow[1].Transparency = 0.25
			Arrow[2].Transparency = Arrow[1].Transparency
			Arrow[3].Transparency = Arrow[1].Transparency
			Arrow[4].Transparency = Arrow[1].Transparency
			Arrow[5].Transparency = Arrow[1].Transparency
			Arrow[6].Transparency = Arrow[1].Transparency
			Arrow[7].Transparency = Arrow[1].Transparency
			Arrow[8].Transparency = Arrow[1].Transparency
			Arrow[9].Transparency = Arrow[1].Transparency
			Arrow[10].Transparency = Arrow[1].Transparency

			Arrow[1].Thickness = 0 --(0.06*Resolution.Y)/(Camera.CFrame.p-(Pos.p+Vector3.new(0,Size.Y,0))).Magnitude
			Arrow[1].Color = Plr.TeamColor.Color
			Arrow[1].ZIndex = Box.ZIndex+3

			Arrow[2].Thickness = Arrow[1].Thickness*2
			Arrow[2].Color = Arrow[1].Color
			Arrow[2].ZIndex = Arrow[1].ZIndex

			Arrow[3].Thickness = Arrow[1].Thickness
			Arrow[3].Color = Arrow[1].Color
			Arrow[3].ZIndex = Arrow[1].ZIndex

			Arrow[4].Thickness = Arrow[1].Thickness*2
			Arrow[4].Color = Arrow[1].Color
			Arrow[4].ZIndex = Arrow[1].ZIndex

			Arrow[5].Thickness = Arrow[1].Thickness
			Arrow[5].Color = Arrow[1].Color
			Arrow[5].ZIndex = Arrow[1].ZIndex
			Arrow[5].PointA = Vector2.new(U2.X,U2.Y)
			Arrow[5].PointB = Vector2.new(R2.X,R2.Y)
			Arrow[5].PointC = Vector2.new(R.X,R.Y)
			Arrow[5].PointD = Vector2.new(U.X,U.Y)

			Arrow[6].Thickness = Arrow[1].Thickness
			Arrow[6].Color = Arrow[1].Color
			Arrow[6].ZIndex = Arrow[1].ZIndex
			Arrow[6].PointA = Vector2.new(U2.X,U2.Y)
			Arrow[6].PointB = Vector2.new(L2.X,L2.Y)
			Arrow[6].PointC = Vector2.new(L.X,L.Y)
			Arrow[6].PointD = Vector2.new(U.X,U.Y)

			Arrow[7].Thickness = Arrow[1].Thickness
			Arrow[7].Color = Arrow[1].Color
			Arrow[7].ZIndex = Arrow[1].ZIndex
			Arrow[7].PointA = Vector2.new(R2.X,R2.Y)
			Arrow[7].PointB = Vector2.new(L2.X,L2.Y)
			Arrow[7].PointC = Vector2.new(L.X,L.Y)
			Arrow[7].PointD = Vector2.new(R.X,R.Y)

			Arrow[8].Thickness = Arrow[1].Thickness
			Arrow[8].Color = Arrow[1].Color
			Arrow[8].ZIndex = Arrow[1].ZIndex
			Arrow[8].PointA = Vector2.new(UR2.X,UR2.Y)
			Arrow[8].PointB = Vector2.new(DR2.X,DR2.Y)
			Arrow[8].PointC = Vector2.new(DR.X,DR.Y)
			Arrow[8].PointD = Vector2.new(UR.X,UR.Y)

			Arrow[9].Thickness = Arrow[1].Thickness
			Arrow[9].Color = Arrow[1].Color
			Arrow[9].ZIndex = Arrow[1].ZIndex
			Arrow[9].PointA = Vector2.new(UL2.X,UL2.Y)
			Arrow[9].PointB = Vector2.new(DL2.X,DL2.Y)
			Arrow[9].PointC = Vector2.new(DL.X,DL.Y)
			Arrow[9].PointD = Vector2.new(UL.X,UL.Y)

			Arrow[10].Thickness = Arrow[1].Thickness
			Arrow[10].Color = Arrow[1].Color
			Arrow[10].ZIndex = Arrow[1].ZIndex
			Arrow[10].PointA = Vector2.new(DR2.X,DR2.Y)
			Arrow[10].PointB = Vector2.new(DL2.X,DL2.Y)
			Arrow[10].PointC = Vector2.new(DL.X,DL.Y)
			Arrow[10].PointD = Vector2.new(DR.X,DR.Y)
            end
            local HPV,HPV2 = nil
            if Head then
            local avghead = (Head.Size.X+Head.Size.Y+Head.Size.Z)/3
            HPV,HPV2 = Camera:WorldToViewportPoint(Head.CFrame.p)
            HeadE.Position = Vector2.new(HPV.X,HPV.Y)
            HeadE.Radius = (Resolution.Y*0.4*avghead)/HPV.Z
            HeadE.Thickness = (Resolution.Y*0.2)/HPV.Z
            HeadE.Color = Plr.TeamColor.Color:Lerp(Color3.new(1,1,1),.5)
            end
            local NT,NT2 = Camera:WorldToViewportPoint(Pos*Vector3.new(0,(Size.Y*NTAGSV/100),0)) --workspace.CurrentCamera.CFrame.p-Char:GetModelCFrame().p).Magnitude
            NameTag.Size = Resolution.Y*(NTAGV/500)
            NameTag.Position = Vector2.new(NT.X,NT.Y-NameTag.TextBounds.Y/2)
            NameTag.Text = Plr.DisplayName.."/"..Plr.Name
            NameTag.Center = true
            NameTag.Color = Color3.new(1,1,1)
            
            local TT,TT2 = Camera:WorldToViewportPoint(Pos*Vector3.new(0,-Size.Y/2,0))
            Tracer.Thickness = Resolution.Y*0.0016
            Tracer.Color = Box.Color
            Tracer.From = Vector2.new(Resolution.X/2,Resolution.Y*0.95)
            Tracer.Transparency = math.clamp(1-(Pos.p-Camera.CFrame.p).Magnitude/423,.32,1)
            --local PlrCameraOffset = Camera.CFrame:PointToObjectSpace(Pos.p) -- could be useful later for aimbot
            if TT.Z<0 then
            local PlrCameraOffset = Camera.CFrame:PointToObjectSpace(Pos*Vector3.new(0,-Size.Y/2,0))
            local AT = math.atan2(PlrCameraOffset.Y, PlrCameraOffset.X) + math.pi;
            local inverse = CFrame.Angles(0, 0, AT):vectorToWorldSpace((CFrame.Angles(0, math.rad(89.9), 0):vectorToWorldSpace(Vector3.new(0, 0, -1)))); --- my brain too ooga booga for this shit
            TT,TT2 = Camera:WorldToViewportPoint(Camera.CFrame:pointToWorldSpace(inverse))
            end
            Tracer.To = Vector2.new(TT.X,TT.Y)
            if TRACERST then Tracer.Visible = ESP else Tracer.Visible = false end
            if NT2 and NTAGST then NameTag.Visible = ESP else NameTag.Visible = false end
            if HPV2 and HESPT then HeadE.Visible = ESP else HeadE.Visible = false end
            if ARW and V5 and V6 and V7 and V8 and V9 and V10 and V11 and V12 and V13 and V14 and V15 and V16 and V17 and V18 then Arrow[1].Visible = ESP Arrow[2].Visible = ESP Arrow[3].Visible = ESP Arrow[4].Visible = ESP Arrow[5].Visible = ESP Arrow[6].Visible = ESP Arrow[7].Visible = ESP Arrow[8].Visible = ESP Arrow[9].Visible = ESP Arrow[10].Visible = ESP else Arrow[1].Visible = false Arrow[2].Visible = false Arrow[3].Visible = false Arrow[4].Visible = false Arrow[5].Visible = false Arrow[6].Visible = false Arrow[7].Visible = false Arrow[8].Visible = false Arrow[9].Visible = false Arrow[10].Visible = false end
			if HLT and V19 and V20 and V21 and V22 then Healthbar[1].Visible = ESP Healthbar[2].Visible = ESP else Healthbar[1].Visible = false Healthbar[2].Visible = false end
			if V1 and V2 and V3 and V4 then Box.Visible = ESP else Box.Visible = false end
		else Tracer.Visible = false HeadE.Visible = false Box.Visible = false Arrow[1].Visible = false Arrow[2].Visible = false Arrow[3].Visible = false Arrow[4].Visible = false Arrow[5].Visible = false Arrow[6].Visible = false Arrow[7].Visible = false Arrow[8].Visible = false Arrow[9].Visible = false Arrow[10].Visible = false Healthbar[1].Visible = false Healthbar[2].Visible = false end
	end
end)

--[[
					local ScreenPosition, Vis = WorldToViewport(v.Instance.Position);
					local Color = v.Color;
					local OPos = Camera.CFrame:pointToObjectSpace(v.Instance.Position);
					
					if ScreenPosition.Z < 0 then
						local AT = math.atan2(OPos.Y, OPos.X) + math.pi;
						OPos = CFrame.Angles(0, 0, AT):vectorToWorldSpace((CFrame.Angles(0, math.rad(89.9), 0):vectorToWorldSpace(V3New(0, 0, -1))));
					end


]] -- This is some code yoinked from unnamed esp
---
physTPS = 0
while wait(.5) do  --- this is for a more readable stat sheet
	PINGL:UpdateLabel("Ping: "..string.split(Ping:GetValueString()," ")[1].."ms")
	FPSL:UpdateLabel("FPS: "..math2.round(1/DELTA,2)) --ez fps and rounding
	TPSL:UpdateLabel("Tasks per second: "..1/(StatsService.HeartbeatTimeMs/1000))
	PTPSL:UpdateLabel("Physics iterations per second: "..1/(StatsService.PhysicsStepTimeMs/1000))
	PhysL:UpdateLabel("Phys TPS: "..workspace:GetRealPhysicsFPS())
	PhysLR:UpdateLabel("True Phys TPS: "..tonumber(1/physTPS))
    if HALT then script:Destroy()  end
end

--GUI:MakeBox(500,500,200,100,true,0,Color3.new(255,255,255))
--[[local throwawaytable = {true,false} -- Gay ass table that i don't need
while true do
	local poop = GUI:MakeBox(math.random(0,Resolution.X),math.random(0,Resolution.Y),math.random(0,Resolution.X),math.random(0,Resolution.Y),throwawaytable[math.random(1,#throwawaytable)],math.random(0,10),Color3.fromRGB(math.random(0,255),math.random(0,255),math.random(0,255))) -- generate random box with random properties
    wait(1)
    table.remove(GUIFRAMES,table.find(GUIFRAMES,poop))
	poop:Remove()
end]] --- Refraining from using drawing api for objects and shit. LITERALLY TOO MUCH TROUBLE FOR ITS WORTH.